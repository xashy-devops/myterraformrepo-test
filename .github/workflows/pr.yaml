name: Terraform CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
   

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11

      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[profile dev]" > ~/.aws/config
          echo "region = us-east-2" >> ~/.aws/config
          echo "output = json" >> ~/.aws/config
          echo "[profile prod]" >> ~/.aws/config
          echo "region = us-east-2" >> ~/.aws/config
          echo "output = json" >> ~/.aws/config
          echo "[dev]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> ~/.aws/credentials
          echo "[prod]" >> ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> ~/.aws/credentials

      - name: Find Changed Directories
        id: find_changed_dirs
        run: |
          echo "Checking for changes in terraform-projects/"
          changed_dirs=()
          base_sha="${{ github.event.pull_request.base.sha || github.event.before }}"
          
          # Find all subdirectories in terraform-projects/
          for dir in terraform-projects/*/; do
            if [[ -d "$dir" ]]; then
              echo "Checking directory: $dir"
              # Check if there are any changes in this directory
              if [[ -n $(git diff --name-only $base_sha ${{ github.sha }} "$dir") ]]; then
                changed_dirs+=("${dir%/}") # Remove trailing slash for output
              fi
            fi
          done
          
          # Join the array into a single string with a delimiter
          changed_dirs_str=$(IFS=,; echo "${changed_dirs[*]}")
          echo "changed_dirs=$changed_dirs_str" >> $GITHUB_OUTPUT

      - name: Terraform Init, Validate, Plan, and Log Results
        run: |
          IFS=',' read -r -a dirs <<< "${{ steps.find_changed_dirs.outputs.changed_dirs }}"
          for dir in "${dirs[@]}"; do
            echo -e "\033[1;34mStarting Terraform operations for directory: $dir\033[0m"  # Bold Blue
            cd "$dir"
            
            echo -e "\033[1;32mDoing terraform init in $dir\033[0m"  # Bold Green
            terraform init
            
            echo -e "\033[1;32mDoing terraform validate in $dir\033[0m"  # Bold Green
            terraform validate
            
            echo -e "\033[1;33mDoing terraform plan in $dir\033[0m"  # Bold Yellow
            terraform plan -lock=false | tee /tmp/plan_${dir//\//_}.log
            
            echo -e "\033[1;34mCompleted Terraform operations for directory: $dir\033[0m"  # Bold Blue
            cd -
          done

      - name: Display Terraform Plan Logs
        run: |
          IFS=',' read -r -a dirs <<< "${{ steps.find_changed_dirs.outputs.changed_dirs }}"
          for dir in "${dirs[@]}"; do
            echo -e "\033[1;35mDisplaying Terraform plan log for $dir\033[0m"  # Bold Magenta
            cat /tmp/plan_${dir//\//_}.log
          done

      - name: Apply Terraform Changes
        if: github.ref == 'refs/heads/main'
        run: |
          IFS=',' read -r -a dirs <<< "${{ steps.find_changed_dirs.outputs.changed_dirs }}"
          for dir in "${dirs[@]}"; do
            echo -e "\033[1;31mApplying Terraform changes in $dir\033[0m"  # Bold Red
            cd "$dir"
            terraform apply -auto-approve -lock=false
            cd -
          done
